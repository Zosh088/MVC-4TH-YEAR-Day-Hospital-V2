// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Surgeon__Day_Hospital_.Data;

#nullable disable

namespace Surgeon__Day_Hospital_.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240925131958_HospitalRecordsTwek01")]
    partial class HospitalRecordsTwek01
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator().HasValue("IdentityUser");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Surgeon__Day_Hospital_.Models.Active_Ingredients", b =>
                {
                    b.Property<int>("ActiveID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ActiveID"));

                    b.Property<string>("Decription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ActiveID");

                    b.ToTable("Active_Ingredients");
                });

            modelBuilder.Entity("Surgeon__Day_Hospital_.Models.Address_Book", b =>
                {
                    b.Property<int>("AddressID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AddressID"));

                    b.Property<int>("CityID")
                        .HasColumnType("int");

                    b.Property<int>("ProvinceID")
                        .HasColumnType("int");

                    b.Property<string>("StreetName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SuburbID")
                        .HasColumnType("int");

                    b.HasKey("AddressID");

                    b.ToTable("Address_Book");
                });

            modelBuilder.Entity("Surgeon__Day_Hospital_.Models.Admin_Records", b =>
                {
                    b.Property<int>("Admin_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Admin_ID"));

                    b.Property<string>("Id")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Personnel_no")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Admin_ID");

                    b.ToTable("Admin_Records");
                });

            modelBuilder.Entity("Surgeon__Day_Hospital_.Models.Admission_Records", b =>
                {
                    b.Property<int>("Admission_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Admission_ID"));

                    b.Property<DateOnly>("AdmissionDate")
                        .HasColumnType("date");

                    b.Property<TimeOnly>("AdmissionTime")
                        .HasColumnType("time");

                    b.Property<int>("BedID")
                        .HasColumnType("int");

                    b.Property<int>("BookingID")
                        .HasColumnType("int");

                    b.Property<string>("Nurse_ID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Patient_ID_no")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Admission_ID");

                    b.HasIndex("BedID");

                    b.HasIndex("BookingID");

                    b.HasIndex("Nurse_ID");

                    b.HasIndex("Patient_ID_no");

                    b.ToTable("Admission_Records");
                });

            modelBuilder.Entity("Surgeon__Day_Hospital_.Models.Allergy_Records", b =>
                {
                    b.Property<int>("AllergyID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AllergyID"));

                    b.Property<int>("ActiveID")
                        .HasColumnType("int");

                    b.Property<string>("Patient_ID_no")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("AllergyID");

                    b.HasIndex("ActiveID");

                    b.HasIndex("Patient_ID_no");

                    b.ToTable("Allergy_Records");
                });

            modelBuilder.Entity("Surgeon__Day_Hospital_.Models.Bed_Records", b =>
                {
                    b.Property<int>("BedRecordID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BedRecordID"));

                    b.Property<int>("Bed_ID")
                        .HasColumnType("int");

                    b.Property<DateOnly>("Day_of_Use")
                        .HasColumnType("date");

                    b.Property<string>("Patient_ID_no")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("BedRecordID");

                    b.HasIndex("Bed_ID");

                    b.HasIndex("Patient_ID_no");

                    b.ToTable("Bed_Records");
                });

            modelBuilder.Entity("Surgeon__Day_Hospital_.Models.Beds", b =>
                {
                    b.Property<int>("BedID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BedID"));

                    b.Property<int>("BedNumber")
                        .HasColumnType("int");

                    b.Property<int>("WardID")
                        .HasColumnType("int");

                    b.HasKey("BedID");

                    b.HasIndex("WardID");

                    b.ToTable("Beds");
                });

            modelBuilder.Entity("Surgeon__Day_Hospital_.Models.Booking_Codes", b =>
                {
                    b.Property<int>("Booking_Code_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Booking_Code_ID"));

                    b.Property<int>("TheatreBookingID")
                        .HasColumnType("int");

                    b.Property<int>("TreatmentCodeID")
                        .HasColumnType("int");

                    b.HasKey("Booking_Code_ID");

                    b.HasIndex("TheatreBookingID");

                    b.HasIndex("TreatmentCodeID");

                    b.ToTable("Booking_Codes");
                });

            modelBuilder.Entity("Surgeon__Day_Hospital_.Models.Chronic_Conditions", b =>
                {
                    b.Property<int>("ConditionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ConditionID"));

                    b.Property<string>("Diagnosis")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ICD10Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Patient_ID_no")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ConditionID");

                    b.HasIndex("Patient_ID_no");

                    b.ToTable("Chronic_Conditions");
                });

            modelBuilder.Entity("Surgeon__Day_Hospital_.Models.Chronic_Medication", b =>
                {
                    b.Property<int>("Chronic_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Chronic_ID"));

                    b.Property<int>("DosageID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Schedule")
                        .HasColumnType("int");

                    b.HasKey("Chronic_ID");

                    b.HasIndex("DosageID");

                    b.ToTable("Chronic_Medications");
                });

            modelBuilder.Entity("Surgeon__Day_Hospital_.Models.Chronic_Medication___Active_Ingredients", b =>
                {
                    b.Property<int>("Chronic_ActiveID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Chronic_ActiveID"));

                    b.Property<int>("ActiveID")
                        .HasColumnType("int");

                    b.Property<int>("ChronicID")
                        .HasColumnType("int");

                    b.Property<string>("Strength")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Chronic_ActiveID");

                    b.HasIndex("ActiveID");

                    b.HasIndex("ChronicID");

                    b.ToTable("Chronic_Medication__Active_Ingredients");
                });

            modelBuilder.Entity("Surgeon__Day_Hospital_.Models.Chronic_Patients", b =>
                {
                    b.Property<int>("ChronicPatientID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ChronicPatientID"));

                    b.Property<int>("ConditionID")
                        .HasColumnType("int");

                    b.Property<string>("Patient_ID_no")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ChronicPatientID");

                    b.HasIndex("ConditionID");

                    b.HasIndex("Patient_ID_no");

                    b.ToTable("Chronic_Patients");
                });

            modelBuilder.Entity("Surgeon__Day_Hospital_.Models.City_Records", b =>
                {
                    b.Property<int>("CityID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CityID"));

                    b.Property<string>("CityName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProvinceID")
                        .HasColumnType("int");

                    b.HasKey("CityID");

                    b.HasIndex("ProvinceID");

                    b.ToTable("City_Records");
                });

            modelBuilder.Entity("Surgeon__Day_Hospital_.Models.Contra_Indications", b =>
                {
                    b.Property<int>("ContraID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ContraID"));

                    b.Property<int>("ActiveID")
                        .HasColumnType("int");

                    b.Property<int>("ConditionID")
                        .HasColumnType("int");

                    b.HasKey("ContraID");

                    b.HasIndex("ActiveID");

                    b.HasIndex("ConditionID");

                    b.ToTable("Contra_Indications");
                });

            modelBuilder.Entity("Surgeon__Day_Hospital_.Models.Day_Hospital_Records", b =>
                {
                    b.Property<int>("HospitalID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("HospitalID"));

                    b.Property<string>("ContactNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HospitalName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PracticeManager")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PracticeManagerEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SuburbID")
                        .HasColumnType("int");

                    b.HasKey("HospitalID");

                    b.HasIndex("SuburbID");

                    b.ToTable("Hospital_Records");
                });

            modelBuilder.Entity("Surgeon__Day_Hospital_.Models.Discharge_Records", b =>
                {
                    b.Property<int>("DischargeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DischargeID"));

                    b.Property<DateTime>("DischargeDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("NurseID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Patient_ID_no")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("DischargeID");

                    b.HasIndex("NurseID");

                    b.HasIndex("Patient_ID_no");

                    b.ToTable("Discharge_Records");
                });

            modelBuilder.Entity("Surgeon__Day_Hospital_.Models.Dosage_Forms", b =>
                {
                    b.Property<int>("DosageID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DosageID"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DosageID");

                    b.ToTable("Dosage_Forms");
                });

            modelBuilder.Entity("Surgeon__Day_Hospital_.Models.MedOrder_Record", b =>
                {
                    b.Property<int>("OrderID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderID"));

                    b.Property<DateOnly>("DateOrdered")
                        .HasColumnType("date");

                    b.Property<DateOnly>("ExpiryDate")
                        .HasColumnType("date");

                    b.Property<string>("PackageType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PharmacistID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("PharmacyID")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("Supplier")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("OrderID");

                    b.HasIndex("PharmacistID");

                    b.HasIndex("PharmacyID");

                    b.ToTable("MedOrder_Records");
                });

            modelBuilder.Entity("Surgeon__Day_Hospital_.Models.Medication_Interactions", b =>
                {
                    b.Property<int>("InteractionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InteractionID"));

                    b.Property<int>("ActiveID1")
                        .HasColumnType("int");

                    b.Property<int>("ActiveID2")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("InteractionID");

                    b.HasIndex("ActiveID1");

                    b.HasIndex("ActiveID2");

                    b.ToTable("Medication_Interactions");
                });

            modelBuilder.Entity("Surgeon__Day_Hospital_.Models.NurseRecords", b =>
                {
                    b.Property<string>("PatientRecordID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Activity")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PatientID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surgeon")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PatientRecordID");

                    b.ToTable("nurseRecords");
                });

            modelBuilder.Entity("Surgeon__Day_Hospital_.Models.Nurse_Records", b =>
                {
                    b.Property<int>("NurseID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NurseID"));

                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PersonnelID")
                        .HasColumnType("int");

                    b.HasKey("NurseID");

                    b.ToTable("Nurse_Records");
                });

            modelBuilder.Entity("Surgeon__Day_Hospital_.Models.Patient_Records", b =>
                {
                    b.Property<string>("Patient_ID_no")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AddressLine1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddressLine2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly?>("Patient_DOB")
                        .HasColumnType("date");

                    b.Property<string>("Patient_Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Patient_Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Patient_Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Patient_Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SuburbID")
                        .HasColumnType("int");

                    b.HasKey("Patient_ID_no");

                    b.HasIndex("SuburbID");

                    b.ToTable("Patient_Records");
                });

            modelBuilder.Entity("Surgeon__Day_Hospital_.Models.Patient_Vital_Records", b =>
                {
                    b.Property<int>("pVitalID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("pVitalID"));

                    b.Property<string>("Patient_ID_no")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("VitalID")
                        .HasColumnType("int");

                    b.HasKey("pVitalID");

                    b.HasIndex("Patient_ID_no");

                    b.HasIndex("VitalID");

                    b.ToTable("Patient_Vitals");
                });

            modelBuilder.Entity("Surgeon__Day_Hospital_.Models.Personnel_Records", b =>
                {
                    b.Property<int>("PersonnelID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PersonnelID"));

                    b.Property<string>("ContactNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HCRNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PersonnelID");

                    b.ToTable("Personnel_Records");
                });

            modelBuilder.Entity("Surgeon__Day_Hospital_.Models.Pharmacist_Records", b =>
                {
                    b.Property<int>("PharmacistID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PharmacistID"));

                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PersonnelID")
                        .HasColumnType("int");

                    b.HasKey("PharmacistID");

                    b.ToTable("Pharmacist_Records");
                });

            modelBuilder.Entity("Surgeon__Day_Hospital_.Models.Pharmacy_Medication", b =>
                {
                    b.Property<int>("PharmacyID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PharmacyID"));

                    b.Property<int>("DosageID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ReOrder")
                        .HasColumnType("int");

                    b.Property<int>("Schedule")
                        .HasColumnType("int");

                    b.Property<int?>("Stock")
                        .IsRequired()
                        .HasColumnType("int");

                    b.HasKey("PharmacyID");

                    b.HasIndex("DosageID");

                    b.ToTable("Pharmacy_Medication");
                });

            modelBuilder.Entity("Surgeon__Day_Hospital_.Models.Pharmacy_Medication___Active_Ingredients", b =>
                {
                    b.Property<int>("Pharmacy_ActiveID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Pharmacy_ActiveID"));

                    b.Property<int>("ActiveID")
                        .HasColumnType("int");

                    b.Property<int>("PharmacyID")
                        .HasColumnType("int");

                    b.Property<string>("Strength")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Pharmacy_ActiveID");

                    b.HasIndex("ActiveID");

                    b.HasIndex("PharmacyID");

                    b.ToTable("Pharmacy_Medication__Active_Ingredients");
                });

            modelBuilder.Entity("Surgeon__Day_Hospital_.Models.Province_Records", b =>
                {
                    b.Property<int>("ProvinceID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProvinceID"));

                    b.Property<string>("ProvinceName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProvinceID");

                    b.ToTable("Province_Records");
                });

            modelBuilder.Entity("Surgeon__Day_Hospital_.Models.Script_Lines", b =>
                {
                    b.Property<int>("ScriptLineID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ScriptLineID"));

                    b.Property<string>("Instructions")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PharmacyID")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("ScriptID")
                        .HasColumnType("int");

                    b.HasKey("ScriptLineID");

                    b.HasIndex("PharmacyID");

                    b.HasIndex("ScriptID");

                    b.ToTable("Script_Lines");
                });

            modelBuilder.Entity("Surgeon__Day_Hospital_.Models.Script_Records", b =>
                {
                    b.Property<int>("ScriptID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ScriptID"));

                    b.Property<DateOnly>("DateIssued")
                        .HasColumnType("date");

                    b.Property<string>("NurseID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Patient_ID_no")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PharmacistID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SurgeonID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<TimeSpan>("TimeIssued")
                        .HasColumnType("time");

                    b.Property<bool>("Urgent")
                        .HasColumnType("bit");

                    b.HasKey("ScriptID");

                    b.HasIndex("Patient_ID_no");

                    b.HasIndex("SurgeonID");

                    b.ToTable("Script_Records");
                });

            modelBuilder.Entity("Surgeon__Day_Hospital_.Models.Suburb_Records", b =>
                {
                    b.Property<int>("SuburbID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SuburbID"));

                    b.Property<int>("CityID")
                        .HasColumnType("int");

                    b.Property<int>("PostalCode")
                        .HasColumnType("int");

                    b.Property<string>("SuburbName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SuburbID");

                    b.HasIndex("CityID");

                    b.ToTable("Suburb_Records");
                });

            modelBuilder.Entity("Surgeon__Day_Hospital_.Models.Theatre_Bookings", b =>
                {
                    b.Property<int>("TheatreBookingID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TheatreBookingID"));

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<string>("Patient_ID_no")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Session")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SurgeonID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("TheatreID")
                        .HasColumnType("int");

                    b.HasKey("TheatreBookingID");

                    b.HasIndex("Patient_ID_no");

                    b.HasIndex("SurgeonID");

                    b.HasIndex("TheatreID");

                    b.ToTable("Theatre_Bookings");
                });

            modelBuilder.Entity("Surgeon__Day_Hospital_.Models.Theatre_Records", b =>
                {
                    b.Property<int>("TheatreID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TheatreID"));

                    b.Property<string>("TheatreName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TheatreID");

                    b.ToTable("Theatre_Records");
                });

            modelBuilder.Entity("Surgeon__Day_Hospital_.Models.Treatment_Codes", b =>
                {
                    b.Property<int>("TreatmentCodeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TreatmentCodeID"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ICD10Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TreatmentCodeID");

                    b.ToTable("Treatment_Codes");
                });

            modelBuilder.Entity("Surgeon__Day_Hospital_.Models.Vital_Records", b =>
                {
                    b.Property<int>("VitalID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VitalID"));

                    b.Property<string>("Patient_ID_no")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("Value")
                        .HasColumnType("float");

                    b.Property<double?>("Value2")
                        .HasColumnType("float");

                    b.Property<int>("Vital")
                        .HasColumnType("int");

                    b.Property<DateOnly>("VitalDate")
                        .HasColumnType("date");

                    b.Property<TimeOnly>("VitalTime")
                        .HasColumnType("time");

                    b.HasKey("VitalID");

                    b.HasIndex("Patient_ID_no");

                    b.HasIndex("Vital");

                    b.ToTable("Vital_Records");
                });

            modelBuilder.Entity("Surgeon__Day_Hospital_.Models.Vital_Types", b =>
                {
                    b.Property<int>("VitalTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VitalTypeID"));

                    b.Property<double>("HighLimit")
                        .HasColumnType("float");

                    b.Property<string>("HighLimit2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("LowLimit")
                        .HasColumnType("float");

                    b.Property<string>("LowLimit2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name2")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("VitalTypeID");

                    b.ToTable("Vital_Types");
                });

            modelBuilder.Entity("Surgeon__Day_Hospital_.Models.Ward_Records", b =>
                {
                    b.Property<int>("WardID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WardID"));

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<string>("WardName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("WardID");

                    b.ToTable("Ward_Records");
                });

            modelBuilder.Entity("Surgeon__Day_Hospital_.Models.User", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<string>("ContactNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HCRNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Surgeon__Day_Hospital_.Models.Admission_Records", b =>
                {
                    b.HasOne("Surgeon__Day_Hospital_.Models.Beds", "Beds")
                        .WithMany()
                        .HasForeignKey("BedID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Surgeon__Day_Hospital_.Models.Theatre_Bookings", "Bookings")
                        .WithMany()
                        .HasForeignKey("BookingID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Surgeon__Day_Hospital_.Models.User", "Nurse")
                        .WithMany()
                        .HasForeignKey("Nurse_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Surgeon__Day_Hospital_.Models.Patient_Records", "Patient")
                        .WithMany()
                        .HasForeignKey("Patient_ID_no")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Beds");

                    b.Navigation("Bookings");

                    b.Navigation("Nurse");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("Surgeon__Day_Hospital_.Models.Allergy_Records", b =>
                {
                    b.HasOne("Surgeon__Day_Hospital_.Models.Active_Ingredients", "ActiveIngredients")
                        .WithMany()
                        .HasForeignKey("ActiveID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Surgeon__Day_Hospital_.Models.Patient_Records", "Patient")
                        .WithMany()
                        .HasForeignKey("Patient_ID_no")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ActiveIngredients");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("Surgeon__Day_Hospital_.Models.Bed_Records", b =>
                {
                    b.HasOne("Surgeon__Day_Hospital_.Models.Beds", "Bed")
                        .WithMany()
                        .HasForeignKey("Bed_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Surgeon__Day_Hospital_.Models.Patient_Records", "Patient")
                        .WithMany()
                        .HasForeignKey("Patient_ID_no")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bed");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("Surgeon__Day_Hospital_.Models.Beds", b =>
                {
                    b.HasOne("Surgeon__Day_Hospital_.Models.Ward_Records", "WardRecords")
                        .WithMany()
                        .HasForeignKey("WardID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WardRecords");
                });

            modelBuilder.Entity("Surgeon__Day_Hospital_.Models.Booking_Codes", b =>
                {
                    b.HasOne("Surgeon__Day_Hospital_.Models.Theatre_Bookings", "Theatre_Bookings")
                        .WithMany()
                        .HasForeignKey("TheatreBookingID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Surgeon__Day_Hospital_.Models.Treatment_Codes", "Treatment_")
                        .WithMany()
                        .HasForeignKey("TreatmentCodeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Theatre_Bookings");

                    b.Navigation("Treatment_");
                });

            modelBuilder.Entity("Surgeon__Day_Hospital_.Models.Chronic_Conditions", b =>
                {
                    b.HasOne("Surgeon__Day_Hospital_.Models.Patient_Records", "Patient")
                        .WithMany()
                        .HasForeignKey("Patient_ID_no")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("Surgeon__Day_Hospital_.Models.Chronic_Medication", b =>
                {
                    b.HasOne("Surgeon__Day_Hospital_.Models.Dosage_Forms", "DosageType")
                        .WithMany()
                        .HasForeignKey("DosageID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DosageType");
                });

            modelBuilder.Entity("Surgeon__Day_Hospital_.Models.Chronic_Medication___Active_Ingredients", b =>
                {
                    b.HasOne("Surgeon__Day_Hospital_.Models.Active_Ingredients", "ActiveIngredients")
                        .WithMany()
                        .HasForeignKey("ActiveID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Surgeon__Day_Hospital_.Models.Chronic_Medication", "ChronicMed")
                        .WithMany()
                        .HasForeignKey("ChronicID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ActiveIngredients");

                    b.Navigation("ChronicMed");
                });

            modelBuilder.Entity("Surgeon__Day_Hospital_.Models.Chronic_Patients", b =>
                {
                    b.HasOne("Surgeon__Day_Hospital_.Models.Chronic_Conditions", "Condition")
                        .WithMany()
                        .HasForeignKey("ConditionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Surgeon__Day_Hospital_.Models.Patient_Records", "Patient")
                        .WithMany()
                        .HasForeignKey("Patient_ID_no")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Condition");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("Surgeon__Day_Hospital_.Models.City_Records", b =>
                {
                    b.HasOne("Surgeon__Day_Hospital_.Models.Province_Records", "Province")
                        .WithMany()
                        .HasForeignKey("ProvinceID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Province");
                });

            modelBuilder.Entity("Surgeon__Day_Hospital_.Models.Contra_Indications", b =>
                {
                    b.HasOne("Surgeon__Day_Hospital_.Models.Active_Ingredients", "ActiveIngredient")
                        .WithMany()
                        .HasForeignKey("ActiveID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Surgeon__Day_Hospital_.Models.Chronic_Conditions", "Condition")
                        .WithMany()
                        .HasForeignKey("ConditionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ActiveIngredient");

                    b.Navigation("Condition");
                });

            modelBuilder.Entity("Surgeon__Day_Hospital_.Models.Day_Hospital_Records", b =>
                {
                    b.HasOne("Surgeon__Day_Hospital_.Models.Suburb_Records", "Suburb")
                        .WithMany()
                        .HasForeignKey("SuburbID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Suburb");
                });

            modelBuilder.Entity("Surgeon__Day_Hospital_.Models.Discharge_Records", b =>
                {
                    b.HasOne("Surgeon__Day_Hospital_.Models.User", "Nurse")
                        .WithMany()
                        .HasForeignKey("NurseID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Surgeon__Day_Hospital_.Models.Patient_Records", "Patient_Records")
                        .WithMany()
                        .HasForeignKey("Patient_ID_no")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Nurse");

                    b.Navigation("Patient_Records");
                });

            modelBuilder.Entity("Surgeon__Day_Hospital_.Models.MedOrder_Record", b =>
                {
                    b.HasOne("Surgeon__Day_Hospital_.Models.User", "Pharmacist")
                        .WithMany()
                        .HasForeignKey("PharmacistID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Surgeon__Day_Hospital_.Models.Pharmacy_Medication", "Pharmacy")
                        .WithMany()
                        .HasForeignKey("PharmacyID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pharmacist");

                    b.Navigation("Pharmacy");
                });

            modelBuilder.Entity("Surgeon__Day_Hospital_.Models.Medication_Interactions", b =>
                {
                    b.HasOne("Surgeon__Day_Hospital_.Models.Active_Ingredients", "ActiveIngre01")
                        .WithMany()
                        .HasForeignKey("ActiveID1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Surgeon__Day_Hospital_.Models.Active_Ingredients", "ActiveIngre02")
                        .WithMany()
                        .HasForeignKey("ActiveID2")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ActiveIngre01");

                    b.Navigation("ActiveIngre02");
                });

            modelBuilder.Entity("Surgeon__Day_Hospital_.Models.Patient_Records", b =>
                {
                    b.HasOne("Surgeon__Day_Hospital_.Models.Suburb_Records", "SuburbRecords")
                        .WithMany()
                        .HasForeignKey("SuburbID");

                    b.Navigation("SuburbRecords");
                });

            modelBuilder.Entity("Surgeon__Day_Hospital_.Models.Patient_Vital_Records", b =>
                {
                    b.HasOne("Surgeon__Day_Hospital_.Models.Patient_Records", "Patient")
                        .WithMany()
                        .HasForeignKey("Patient_ID_no")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Surgeon__Day_Hospital_.Models.Vital_Records", "Vitals")
                        .WithMany()
                        .HasForeignKey("VitalID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");

                    b.Navigation("Vitals");
                });

            modelBuilder.Entity("Surgeon__Day_Hospital_.Models.Pharmacy_Medication", b =>
                {
                    b.HasOne("Surgeon__Day_Hospital_.Models.Dosage_Forms", "DosageType")
                        .WithMany()
                        .HasForeignKey("DosageID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DosageType");
                });

            modelBuilder.Entity("Surgeon__Day_Hospital_.Models.Pharmacy_Medication___Active_Ingredients", b =>
                {
                    b.HasOne("Surgeon__Day_Hospital_.Models.Active_Ingredients", "ActiveIngredients")
                        .WithMany()
                        .HasForeignKey("ActiveID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Surgeon__Day_Hospital_.Models.Pharmacy_Medication", "Pharmacy")
                        .WithMany()
                        .HasForeignKey("PharmacyID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ActiveIngredients");

                    b.Navigation("Pharmacy");
                });

            modelBuilder.Entity("Surgeon__Day_Hospital_.Models.Script_Lines", b =>
                {
                    b.HasOne("Surgeon__Day_Hospital_.Models.Pharmacy_Medication", "Pharmacy")
                        .WithMany()
                        .HasForeignKey("PharmacyID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Surgeon__Day_Hospital_.Models.Script_Records", "ScriptRecords")
                        .WithMany()
                        .HasForeignKey("ScriptID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pharmacy");

                    b.Navigation("ScriptRecords");
                });

            modelBuilder.Entity("Surgeon__Day_Hospital_.Models.Script_Records", b =>
                {
                    b.HasOne("Surgeon__Day_Hospital_.Models.Patient_Records", "Patient")
                        .WithMany()
                        .HasForeignKey("Patient_ID_no")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Surgeon__Day_Hospital_.Models.User", "Users")
                        .WithMany()
                        .HasForeignKey("SurgeonID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Surgeon__Day_Hospital_.Models.Suburb_Records", b =>
                {
                    b.HasOne("Surgeon__Day_Hospital_.Models.City_Records", "City")
                        .WithMany()
                        .HasForeignKey("CityID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("Surgeon__Day_Hospital_.Models.Theatre_Bookings", b =>
                {
                    b.HasOne("Surgeon__Day_Hospital_.Models.Patient_Records", "Patient")
                        .WithMany()
                        .HasForeignKey("Patient_ID_no")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Surgeon__Day_Hospital_.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("SurgeonID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Surgeon__Day_Hospital_.Models.Theatre_Records", "Theatre")
                        .WithMany()
                        .HasForeignKey("TheatreID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");

                    b.Navigation("Theatre");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Surgeon__Day_Hospital_.Models.Vital_Records", b =>
                {
                    b.HasOne("Surgeon__Day_Hospital_.Models.Patient_Records", "Patient_Records")
                        .WithMany()
                        .HasForeignKey("Patient_ID_no")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Surgeon__Day_Hospital_.Models.Vital_Types", "VitalT")
                        .WithMany()
                        .HasForeignKey("Vital")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient_Records");

                    b.Navigation("VitalT");
                });
#pragma warning restore 612, 618
        }
    }
}
